{"version":3,"sources":["../node_modules/@sqs/i18n-ui/packs sync /^/.//.*/.json$","../node_modules/@phensley/cldr/packs sync /^/.//.*/.json$","cldr/index.js","components/DateFormattingContainer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","version","dependencies","packurl","framework","CLDRFramework","loader","locale","require","asyncLoader","language","fetch","then","r","json","catch","err","console","log","packCacheSize","supported","availableLocales","sort","l","tag","expanded","LOCALES","LocaleMatcher","nowTimestamp","moment","valueOf","localizedTokenMap","customTokenMap","renderTableHeaderRow","getMomentFormattingToken","tokenKey","localeToken","localeData","longDateFormat","DateFormattingContainer","customizeMoment","myMoment","clone","cldr","get","split","key","cldrDate","date","toDate","zoneId","className","momentValue","format","cldrValue","Calendars","formatDate","context","skeleton","doValuesMatch","classnames","mismatch","renderLocalizedTable","formatDateRaw","pattern","renderCustomTable","intervals","unit","interval","startDate","endDate","add","momentOutput","from","cldrOutput","formatRelativeTime","toGregorianDate","renderRelativeDates","calendar","renderCalendarDates","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.97ec1968.chunk.js","sourcesContent":["var map = {\n\t\"./af.json\": 254,\n\t\"./am.json\": 255,\n\t\"./ar.json\": 256,\n\t\"./as.json\": 257,\n\t\"./az.json\": 258,\n\t\"./be.json\": 259,\n\t\"./bg.json\": 260,\n\t\"./bn.json\": 261,\n\t\"./bs.json\": 262,\n\t\"./ca.json\": 263,\n\t\"./cs.json\": 264,\n\t\"./cy.json\": 265,\n\t\"./da.json\": 266,\n\t\"./de.json\": 267,\n\t\"./el.json\": 268,\n\t\"./en.json\": 269,\n\t\"./es.json\": 270,\n\t\"./et.json\": 271,\n\t\"./eu.json\": 272,\n\t\"./fa.json\": 273,\n\t\"./fi.json\": 274,\n\t\"./fil.json\": 275,\n\t\"./fr.json\": 276,\n\t\"./ga.json\": 277,\n\t\"./gl.json\": 278,\n\t\"./gu.json\": 279,\n\t\"./he.json\": 280,\n\t\"./hi.json\": 281,\n\t\"./hr.json\": 282,\n\t\"./hu.json\": 283,\n\t\"./hy.json\": 284,\n\t\"./id.json\": 285,\n\t\"./is.json\": 286,\n\t\"./it.json\": 287,\n\t\"./ja.json\": 288,\n\t\"./jv.json\": 289,\n\t\"./ka.json\": 290,\n\t\"./kk.json\": 291,\n\t\"./km.json\": 292,\n\t\"./kn.json\": 293,\n\t\"./ko.json\": 294,\n\t\"./ky.json\": 295,\n\t\"./lo.json\": 296,\n\t\"./lt.json\": 297,\n\t\"./lv.json\": 298,\n\t\"./mk.json\": 299,\n\t\"./ml.json\": 300,\n\t\"./mn.json\": 301,\n\t\"./mr.json\": 302,\n\t\"./ms.json\": 303,\n\t\"./my.json\": 304,\n\t\"./nb.json\": 305,\n\t\"./ne.json\": 306,\n\t\"./nl.json\": 307,\n\t\"./or.json\": 308,\n\t\"./pa.json\": 309,\n\t\"./pl.json\": 310,\n\t\"./ps.json\": 311,\n\t\"./pt.json\": 312,\n\t\"./resource.json\": 313,\n\t\"./ro.json\": 314,\n\t\"./ru.json\": 315,\n\t\"./sd.json\": 316,\n\t\"./si.json\": 317,\n\t\"./sk.json\": 318,\n\t\"./sl.json\": 319,\n\t\"./so.json\": 320,\n\t\"./sq.json\": 321,\n\t\"./sr.json\": 322,\n\t\"./sv.json\": 323,\n\t\"./sw.json\": 324,\n\t\"./ta.json\": 325,\n\t\"./te.json\": 326,\n\t\"./th.json\": 327,\n\t\"./tk.json\": 328,\n\t\"./tr.json\": 329,\n\t\"./uk.json\": 330,\n\t\"./ur.json\": 331,\n\t\"./uz.json\": 332,\n\t\"./vi.json\": 333,\n\t\"./yue.json\": 334,\n\t\"./zh.json\": 335,\n\t\"./zu.json\": 336\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 253;","var map = {\n\t\"./af.json\": 424,\n\t\"./am.json\": 425,\n\t\"./ar.json\": 426,\n\t\"./as.json\": 427,\n\t\"./az.json\": 428,\n\t\"./be.json\": 429,\n\t\"./bg.json\": 430,\n\t\"./bn.json\": 431,\n\t\"./bs.json\": 432,\n\t\"./ca.json\": 433,\n\t\"./cs.json\": 434,\n\t\"./cy.json\": 435,\n\t\"./da.json\": 436,\n\t\"./de.json\": 437,\n\t\"./el.json\": 438,\n\t\"./en.json\": 439,\n\t\"./es.json\": 440,\n\t\"./et.json\": 441,\n\t\"./eu.json\": 442,\n\t\"./fa.json\": 443,\n\t\"./fi.json\": 444,\n\t\"./fil.json\": 445,\n\t\"./fr.json\": 446,\n\t\"./ga.json\": 447,\n\t\"./gl.json\": 448,\n\t\"./gu.json\": 449,\n\t\"./he.json\": 450,\n\t\"./hi.json\": 451,\n\t\"./hr.json\": 452,\n\t\"./hu.json\": 453,\n\t\"./hy.json\": 454,\n\t\"./id.json\": 455,\n\t\"./is.json\": 456,\n\t\"./it.json\": 457,\n\t\"./ja.json\": 458,\n\t\"./jv.json\": 459,\n\t\"./ka.json\": 460,\n\t\"./kk.json\": 461,\n\t\"./km.json\": 462,\n\t\"./kn.json\": 463,\n\t\"./ko.json\": 464,\n\t\"./ky.json\": 465,\n\t\"./lo.json\": 466,\n\t\"./lt.json\": 467,\n\t\"./lv.json\": 468,\n\t\"./mk.json\": 469,\n\t\"./ml.json\": 470,\n\t\"./mn.json\": 471,\n\t\"./mr.json\": 472,\n\t\"./ms.json\": 473,\n\t\"./my.json\": 474,\n\t\"./nb.json\": 475,\n\t\"./ne.json\": 476,\n\t\"./nl.json\": 477,\n\t\"./or.json\": 478,\n\t\"./pa.json\": 479,\n\t\"./pl.json\": 480,\n\t\"./ps.json\": 481,\n\t\"./pt.json\": 482,\n\t\"./resource.json\": 483,\n\t\"./ro.json\": 484,\n\t\"./ru.json\": 485,\n\t\"./sd.json\": 486,\n\t\"./si.json\": 487,\n\t\"./sk.json\": 488,\n\t\"./sl.json\": 489,\n\t\"./so.json\": 490,\n\t\"./sq.json\": 491,\n\t\"./sr.json\": 492,\n\t\"./sv.json\": 493,\n\t\"./sw.json\": 494,\n\t\"./ta.json\": 495,\n\t\"./te.json\": 496,\n\t\"./th.json\": 497,\n\t\"./tk.json\": 498,\n\t\"./tr.json\": 499,\n\t\"./uk.json\": 500,\n\t\"./ur.json\": 501,\n\t\"./uz.json\": 502,\n\t\"./vi.json\": 503,\n\t\"./yue.json\": 504,\n\t\"./zh.json\": 505,\n\t\"./zu.json\": 506\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 423;","import { CLDRFramework, LocaleMatcher } from \"@phensley/cldr\";\nimport pkg from \"../../package.json\";\n\n// Get exact version of @phensley/cldr dependency\nconst version = pkg.dependencies[\"@phensley/cldr\"];\n\nconst packurl = `https://cdn.jsdelivr.net/npm/@phensley/cldr@${version}/packs`;\n\n// Fetch the language resource pack for this version.\nconst asyncLoader = language =>\n  fetch(`${packurl}/${language}.json`)\n    .then(r => r.json())\n    .catch(err => console.log(err));\n\nexport const framework = new CLDRFramework({\n  loader: locale => require(`@phensley/cldr/packs/${locale}.json`),\n  asyncLoader,\n  packCacheSize: 8\n});\n\nconst allLocales = CLDRFramework.availableLocales();\n\nconst supported = allLocales\n  // place the default locale at the front of the supported list\n  .sort(l => (l.tag.expanded() === \"en-Latn-US\" ? -1 : 1))\n  .map(l => l.id);\n\nexport const localeMatcher = new LocaleMatcher(supported);\n","import * as React from 'react';\nimport moment from 'moment';\nimport classnames from 'classnames';\n\nimport { customizeMoment } from '@sqs/i18n-ui';\nimport { framework } from \"../../cldr\";\nimport { CLDR  } from \"@phensley/cldr\";\n\nconst LOCALES = ['en-US', 'es-419', 'de-DE', 'fr-FR', 'it-IT', 'pt-BR'];\nconst nowTimestamp = moment().valueOf();\n\n// This object maps Moments localized tokens to the compatible CLDR.Calendar skeleton/token\nconst localizedTokenMap: {[key: string]: string} = {\n  'LLL':'yMMMMd',\n  'lllLT':'yMMMd hms',\n  'L hh:mm:ss':'yMd hms',\n  'll':'MMMd',\n  'llddd':'MMMEd',\n  'llll':'MMMEdy',\n  'LLLL':'MMMMEEEEdy',\n  'LT':'hm',\n  'LLLLT':'yMMMMd h:mm a',\n  'LLTS':'yMd hms'\n};\n// Custom moment token tokens that map \nconst customTokenMap: {[key: string]: string} = {\n  'MM-YYYY':'MM-y',\n  'MM-DD-YYYY':'MM-d-y',\n  'MMMM Do YYYY':'MMMM d y',\n  'MMMM':'MMMM',\n  'MMMM YYYY':'MMMM y',\n  'MMM':'MMM',\n  'A':'a',\n  'ddd':'E',\n  'h':'h',\n  'mm':'m',\n  'h:mma':'h:mma',\n  'ha': 'ha',\n  'YYYY':'y',\n  'MMM DD, YYYY hh:mm A':'MMM d, y hh:mm a',\n  'MM/YY':'MM/YY',\n  'D':'d',\n};\n\nconst renderTableHeaderRow = () => (\n  <tr>\n    <th>Match</th>\n    <th>Moment Token</th>\n    <th>CLDR.Calendar Token</th>\n    <th>Moment Output</th>\n    <th>CLDR.Calendar Output</th>\n  </tr>\n);\n\nconst getMomentFormattingToken = (tokenKey: any) => {\n  const localeToken = moment.localeData().longDateFormat(tokenKey);\n  if(tokenKey in moment.localeData().longDateFormat){\n    return moment.localeData().longDateFormat(tokenKey);\n  }\n  return localeToken || tokenKey;\n};\n\nconst renderLocalizedTable = (myMoment: moment.Moment, cldr: CLDR) => {\n  const cldrDate = { \n    date: myMoment.toDate(),\n    zoneId: \"America/New_York\"\n  };\n  return (\n    <div className=\"tableContainer\">\n      <table>\n        <tbody>\n          {renderTableHeaderRow()}\n          {Object.keys(localizedTokenMap).map((tokenKey: string)=> {\n            const momentValue = myMoment.format(getMomentFormattingToken(tokenKey));\n            const cldrValue = cldr.Calendars.formatDate(cldrDate, { \n                context: 'standalone', \n                skeleton: localizedTokenMap[tokenKey]\n              });\n            const doValuesMatch = momentValue == cldrValue;\n            return (\n              <tr key={tokenKey} className={classnames({mismatch: !doValuesMatch})}>\n                <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n                <td>{tokenKey}</td>\n                <td>{localizedTokenMap[tokenKey]}</td>\n                <td>{momentValue}</td>\n                <td>{cldrValue}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst renderCustomTable = (myMoment: moment.Moment, cldr: CLDR) => {\n  const cldrDate = { \n    date: myMoment.toDate(),\n    zoneId: \"America/New_York\"\n  };\n  return (\n    <div className=\"tableContainer\">\n      <table>\n        <tbody>\n        {renderTableHeaderRow()}\n        {Object.keys(customTokenMap).map((tokenKey: string)=> {\n          const momentValue = myMoment.format(getMomentFormattingToken(tokenKey));\n          const cldrValue = cldr.Calendars.formatDateRaw(cldrDate, { \n              pattern: customTokenMap[tokenKey]\n            });\n          const doValuesMatch = momentValue == cldrValue;\n          return (\n            <tr key={tokenKey} className={classnames({mismatch: !doValuesMatch})}>\n              <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n              <td>{tokenKey}</td>\n              <td>{customTokenMap[tokenKey]}</td>\n              <td>{momentValue}</td>\n              <td>{cldrValue}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nconst renderDateDifference = (myMoment: moment.Moment, cldr: CLDR) => {\n  const output = [{\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'days'),\n    measure: 'days',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'weeks'),\n    measure: 'weeks',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'weeks'),\n    measure: 'years',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().add(1, 'years'),\n    measure: 'years',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(5, 'years'),\n    measure: 'years',\n  },\n\n];\nreturn (\n  <div className=\"tableContainer\">\n      <table>\n        <tbody>\n        <tr>\n          <th>aDate</th>\n          <th>bDate</th>\n          <th>measure</th>\n          <th>cldrOutput</th>\n          <th>momentOutput</th>\n        </tr>\n        {output.map((outputItem, i) => {\n\n          return (\n            <tr key={i}>\n              <td>{outputItem.aDate.format()}</td>\n              <td>{outputItem.bDate.format()}</td>\n              <td>{outputItem.measure}</td>\n              <td>{''}</td>\n              \n              <td>{\n                //@ts-ignore\n                outputItem.aDate.diff(outputItem.bDate, outputItem.measure)\n              }</td>\n            </tr>\n          )\n        })}\n        </tbody>\n      </table>\n    </div>\n);\n}\nconst renderRelativeDates = (myMoment: moment.Moment, cldr: CLDR) => {\n  const unitOfTime = [\n    'day',\n    'month',\n    'year',\n    'seconds'\n  ];\n  const intervals = [-2, -1, 0, 1, 3 ];\n\n  return (\n    <div className=\"tableContainer\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Match</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>Moment Output</th>\n              <th>CLDR Output</th>\n            </tr>\n            {\n              unitOfTime.map(unit => {\n              return intervals.map(interval => {\n                const startDate = myMoment.clone().valueOf();\n                //@ts-ignore\n                const endDate = myMoment.clone().add(interval, unit).valueOf();\n                const momentOutput = moment(endDate).from(startDate);\n                const cldrOutput = cldr.Calendars.formatRelativeTime(\n                  cldr.Calendars.toGregorianDate({ date: startDate }),\n                  cldr.Calendars.toGregorianDate({ date: endDate })\n                )\n                const doValuesMatch = momentOutput == cldrOutput;\n                return (\n                  <tr key={interval + unit} className={classnames({mismatch: !doValuesMatch})}>\n                    <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n                    <td>{moment(startDate).format()}</td>\n                    <td>{moment(endDate).format()}</td>\n                    <td>{momentOutput}</td>\n                    <td>{cldrOutput}</td>\n                  </tr>\n                );\n              });\n            })\n          }\n        </tbody>\n        </table>\n      </div>\n  );\n};\nconst renderCalendarDates = (myMoment: moment.Moment, cldr: CLDR) => {\n  const unitOfTime = [\n    'day',\n    'month',\n    'year',\n    'seconds'\n  ];\n  const intervals = [-2, -1, 0, 1, 3 ];\n\n  return (\n    <div className=\"tableContainer\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Match</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>Moment Output</th>\n              <th>CLDR Output</th>\n            </tr>\n            {\n              unitOfTime.map(unit => {\n              return intervals.map(interval => {\n                const startDate = myMoment.clone().valueOf();\n                //@ts-ignore\n                const endDate = myMoment.clone().add(interval, unit).valueOf();\n                const momentOutput = moment(endDate).calendar(startDate);\n                const cldrOutput = cldr.Calendars.formatRelativeTime(\n                  cldr.Calendars.toGregorianDate({ date: startDate }),\n                  cldr.Calendars.toGregorianDate({ date: endDate })\n                )\n                const doValuesMatch = momentOutput == cldrOutput;\n                return (\n                  <tr key={interval + unit} className={classnames({mismatch: !doValuesMatch})}>\n                  <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n                    <td>{moment(startDate).format()}</td>\n                    <td>{moment(endDate).format()}</td>\n                    <td>{cldrOutput}</td>\n                    <td>{momentOutput}</td>\n                  </tr>\n                );\n              });\n            })\n          }\n        </tbody>\n        </table>\n      </div>\n  );\n};\n\nconst DateFormattingContainer = () => {\n  return ( \n    <div>\n      <h2>Date Display/Formatting</h2>\n        <h3>Function signatures</h3>\n        <pre>\n          <code>\n            <span>// Momentjs</span>\n            <span>moment().format(getFormattingToken(token));</span><br/>\n            <span>// CLDR.Calendar localized format</span>\n            <span>{`cldr.Calendars.formatDate(date, { context: 'standalone', skeleton: token});`}</span>\n            <span>// CLDR.Calendar custom format</span>\n            <span>{`cldr.Calendars.formatDateRaw(date, { pattern: token});`}</span>\n          </code>\n        </pre>\n        { LOCALES.map(locale => {\n          // Customize Momentjs\n          customizeMoment(locale);\n          const myMoment = moment(nowTimestamp).clone();\n          // Get CLDR framework by locale\n          const cldr = framework.get(locale.split('-')[0]);\n          return (\n            <div key={locale}>\n              <h3> \n                <a id={`${locale}_localized-formatting`}>\n                  Localized tokens for {locale}\n                </a>\n              </h3>\n              {renderLocalizedTable(myMoment, cldr)}\n              <h3>\n                <a id={`${locale}_custom-formatting`}>\n                    Custom output for {locale}\n                </a>\n              </h3>\n              {renderCustomTable(myMoment, cldr)}\n              <h3>\n                <a id={`${locale}_relative-dates`}>\n                  Relative Dates for {locale}\n                </a>\n              </h3>\n              {renderRelativeDates(myMoment, cldr)}\n              <h3>\n                <a id={`${locale}_calendar-dates`}>\n                  Calendar Dates for {locale}\n                </a>\n              </h3>\n              {renderCalendarDates(myMoment, cldr)}\n            </div>\n          )}) \n        }\n    </div>\n  );\n\n};\n\nexport default DateFormattingContainer;","import * as React from 'react';\n\nimport './App.css';\nimport { customizeMoment } from '@sqs/i18n-ui';\nimport { framework, localeMatcher } from \"./cldr\";\nimport DateFormattingContainer from './components/DateFormattingContainer';\n\ntype State = {\n  formattingLocale: string,\n};\n\ntype Props = any;\n\nclass App extends React.Component<Props, State> {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Moment vs CLDR.Calendar</h1>\n        </header>\n        <div>\n          <DateFormattingContainer />\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}