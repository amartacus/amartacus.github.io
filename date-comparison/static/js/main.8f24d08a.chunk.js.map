{"version":3,"sources":["../node_modules/@sqs/i18n-ui/packs sync /^/.//.*/.json$","i18n/index.ts","components/DateFormattingContainer/HumanizedTable.tsx","components/DateFormattingContainer/TableSectionHeader.tsx","components/DateFormattingContainer/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","i18nInstance","I18nUI","translationLocale","formattingLocale","i18nReact","I18nReact","i18nIcuMessageFormatter","I18nIcuMessageFormatter","i18nNumParser","I18nNumParser","HumanizedTable","formatIcuMessage","parseNumber","T","Plural","FormattedCurrency","FormattedNumber","FormattedDateTime","RelativeTime","formatNumber","formatCurrency","formatCurrencyToParts","getCurrencySymbol","formatQuantity","formatDateTime","formatRelativeTime","translate","pluralize","formatDate","formatSystemDate","formatContextualDate","tableData","className","rowItemData","i","startDate","endDate","momentOutput","cldrOutput","doValuesMatch","key","classnames","mismatch","TableSectionHeader","locale","title","snakeCase","href","LOCALES","nowTimestamp","moment","valueOf","localizedTokenMap","TIME_UNITS","TIME_INTERVALS","getMomentFormattingToken","tokenKey","localeToken","localeData","longDateFormat","DateFormattingContainer","setFormattingLocale","myMoment","clone","calendarData","relativeData","nowTimeStamp","forEach","unit","interval","xTimeStamp","add","dataItem","format","push","calendar","from","cldrFormatRelativeTime","buildHumanizedTableData","cldrDate","date","zoneId","momentValue","cldrValue","renderLocalizedTable","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8f24d08a.chunk.js","sourcesContent":["var map = {\n\t\"./af.json\": 217,\n\t\"./am.json\": 218,\n\t\"./ar.json\": 219,\n\t\"./as.json\": 220,\n\t\"./az.json\": 221,\n\t\"./be.json\": 222,\n\t\"./bg.json\": 223,\n\t\"./bn.json\": 224,\n\t\"./bs.json\": 225,\n\t\"./ca.json\": 226,\n\t\"./cs.json\": 227,\n\t\"./cy.json\": 228,\n\t\"./da.json\": 229,\n\t\"./de.json\": 230,\n\t\"./el.json\": 231,\n\t\"./en.json\": 232,\n\t\"./es.json\": 233,\n\t\"./et.json\": 234,\n\t\"./eu.json\": 235,\n\t\"./fa.json\": 236,\n\t\"./fi.json\": 237,\n\t\"./fil.json\": 238,\n\t\"./fr.json\": 239,\n\t\"./ga.json\": 240,\n\t\"./gl.json\": 241,\n\t\"./gu.json\": 242,\n\t\"./he.json\": 243,\n\t\"./hi.json\": 244,\n\t\"./hr.json\": 245,\n\t\"./hu.json\": 246,\n\t\"./hy.json\": 247,\n\t\"./id.json\": 248,\n\t\"./is.json\": 249,\n\t\"./it.json\": 250,\n\t\"./ja.json\": 251,\n\t\"./jv.json\": 252,\n\t\"./ka.json\": 253,\n\t\"./kk.json\": 254,\n\t\"./km.json\": 255,\n\t\"./kn.json\": 256,\n\t\"./ko.json\": 257,\n\t\"./ky.json\": 258,\n\t\"./lo.json\": 259,\n\t\"./lt.json\": 260,\n\t\"./lv.json\": 261,\n\t\"./mk.json\": 262,\n\t\"./ml.json\": 263,\n\t\"./mn.json\": 264,\n\t\"./mr.json\": 265,\n\t\"./ms.json\": 266,\n\t\"./my.json\": 267,\n\t\"./nb.json\": 268,\n\t\"./ne.json\": 269,\n\t\"./nl.json\": 270,\n\t\"./or.json\": 271,\n\t\"./pa.json\": 272,\n\t\"./pl.json\": 273,\n\t\"./ps.json\": 274,\n\t\"./pt.json\": 275,\n\t\"./resource.json\": 276,\n\t\"./ro.json\": 277,\n\t\"./ru.json\": 278,\n\t\"./sd.json\": 279,\n\t\"./si.json\": 280,\n\t\"./sk.json\": 281,\n\t\"./sl.json\": 282,\n\t\"./so.json\": 283,\n\t\"./sq.json\": 284,\n\t\"./sr.json\": 285,\n\t\"./sv.json\": 286,\n\t\"./sw.json\": 287,\n\t\"./ta.json\": 288,\n\t\"./te.json\": 289,\n\t\"./th.json\": 290,\n\t\"./tk.json\": 291,\n\t\"./tr.json\": 292,\n\t\"./uk.json\": 293,\n\t\"./ur.json\": 294,\n\t\"./uz.json\": 295,\n\t\"./vi.json\": 296,\n\t\"./yue.json\": 297,\n\t\"./zh.json\": 298,\n\t\"./zu.json\": 299\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 216;","import { I18nUI } from '@sqs/i18n-ui';\nimport I18nReact from '@sqs/i18n-ui/lib/react';\nimport I18nIcuMessageFormatter from '@sqs/i18n-ui/lib/icu-message-formatter';\nimport I18nNumParser from '@sqs/i18n-ui/lib/number-parser';\n\nexport const i18nInstance = new I18nUI({\n  translationLocale: 'en-US',\n  formattingLocale: 'en-US',\n});\n\nconst i18nReact = new I18nReact(i18nInstance);\nconst i18nIcuMessageFormatter = new I18nIcuMessageFormatter(i18nInstance);\nconst i18nNumParser = new I18nNumParser(i18nInstance);\n\nexport const {\n  formatIcuMessage,\n} = i18nIcuMessageFormatter;\n\nexport const {\n  parseNumber,\n} = i18nNumParser;\n\nexport const {\n  T,\n  Plural,\n  FormattedCurrency,\n  FormattedNumber,\n  FormattedDateTime,\n  RelativeTime,\n} = i18nReact;\n\nexport const {\n  // Vanilla Formatters\n  formatNumber,\n  formatCurrency,\n  formatCurrencyToParts,\n  getCurrencySymbol,\n  formatQuantity,\n  formatDateTime,\n  formatRelativeTime,\n  translate: t,\n  pluralize,\n  // @ts-ignore\n  formatDate,\n  // @ts-ignore\n  formatSystemDate,\n  // @ts-ignore\n  formatContextualDate\n} = i18nInstance;","import * as React from 'react';\nimport classnames from 'classnames';\n\nexport interface IHumanizeDataItem {\n  startDate: string;\n  endDate: string;\n  momentOutput: string;\n  cldrOutput: string;\n}\n\nconst HumanizedTable: React.FC<{ tableData: IHumanizeDataItem[] }> = ({ tableData }) => (\n    <div className=\"tableContainer\">\n        <table>\n          <tbody>\n            <tr>\n              <th>Match</th>\n              <th>Start Date</th>\n              <th>End Date</th>\n              <th>Moment Output</th>\n              <th>CLDR Output</th>\n            </tr>\n            {\n              tableData.map((rowItemData, i) => {\n                const {\n                  startDate,\n                  endDate,\n                  momentOutput,\n                  cldrOutput\n                } = rowItemData;\n                const doValuesMatch = momentOutput === cldrOutput;\n                return (\n                  <tr key={i} className={classnames({mismatch: !doValuesMatch})}>\n                    <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n                    <td>{startDate}</td>\n                    <td>{endDate}</td>\n                    <td>{momentOutput}</td>\n                    <td>{cldrOutput}</td>\n                  </tr>\n                );\n              })\n          }\n        </tbody>\n        </table>\n      </div>\n  );\n\n  export default HumanizedTable;","import * as React from 'react';\nimport { snakeCase } from 'lodash';\n\nconst TableSectionHeader: React.FC<{locale: string, title: string}> = ({ locale, title }) => (\n  <h3> \n    <a id={`${snakeCase(locale + ' ' + title)}`} href={`#${snakeCase(locale + ' ' + title)}`}>\n      <span className=\"table-title\">{title}</span> ({locale})\n    </a>\n  </h3>\n);\n\nexport default TableSectionHeader;","import * as React from 'react';\nimport moment from 'moment';\nimport classnames from 'classnames';\n\nimport { i18nInstance } from '../../i18n';\nimport { framework } from \"../../cldr\";\nimport { CLDR  } from \"@phensley/cldr\";\nimport getCldrCalendarDate from './cldrCalendarDate';\nimport HumanizedTable, {\n  IHumanizeDataItem\n} from './HumanizedTable';\nimport TableSectionHeader from './TableSectionHeader';\n\nconst LOCALES = ['en-US', 'es-419', 'de-DE', 'fr-FR', 'it-IT', 'pt-BR'];\nconst nowTimestamp = moment().valueOf();\n\n// This object maps Moments localized tokens to the compatible CLDR.Calendar skeleton/token\nconst localizedTokenMap: {[key: string]: string} = {\n  'LLL':'yMMMMd',\n  'lllLT':'yMMMd j:mm a',\n  'L hh:mm:ss':'yMd jms',\n  'll':'MMMd',\n  'lll': 'yMMMd',\n  'llddd':'MMMEd',\n  'llll':'MMMEdy',\n  'LLLL':'MMMMEEEEdy',\n  'LT':'jm',\n  'LLLLT':'yMMMMd j:mm a',\n  'LLTS':'yMd jms a',\n  'llllLT': 'yMMMEd jms a',\n  'lldddLT': 'MMMEd jm a'    \n};\n// Custom moment token tokens that map \nconst customTokenMap: {[key: string]: string} = {\n  'MM-YYYY':'MM-y',\n  'MM-DD-YYYY':'MM-dd-y',\n  'MMMM Do YYYY':'MMMM d y',\n  'MMMM':'MMMM',\n  'MMMM YYYY':'MMMM y',\n  'MMM':'MMM',\n  'A':'a',\n  'ddd':'E',\n  'h':'h',\n  'mm':'m',\n  'h:mma':'h:mma',\n  'ha': 'ha',\n  'YYYY':'y',\n  'MMM DD, YYYY hh:mm A':'MMM dd, y hh:mm a',\n  'MM/YY':'MM/YY',\n  'D':'d',\n};\n\nconst TIME_UNITS: moment.unitOfTime.DurationConstructor[] = [\n  'day',\n  'month',\n  'year',\n  'hours',\n  'minutes',\n  'seconds'\n];\nconst TIME_INTERVALS: number[] = [-366, -7, -5, -2, -1, 0, 1, 2, 5, 7, 366];\n\nconst getMomentFormattingToken = (tokenKey: any) => {\n  const localeToken = moment.localeData().longDateFormat(tokenKey);\n  if(tokenKey in moment.localeData().longDateFormat){\n    return moment.localeData().longDateFormat(tokenKey);\n  }\n  return localeToken || tokenKey;\n};\n\nconst renderLocalizedTable = (myMoment: moment.Moment) => {\n  const cldrDate = { \n    date: myMoment.valueOf(),\n    zoneId: \"America/New_York\"\n  };\n  return (\n    <div className=\"tableContainer\">\n      <table>\n        <tbody>\n          <tr>\n            <th>Match</th>\n            <th>Moment Token</th>\n            <th>CLDR.Calendar Token</th>\n            <th>Moment Output</th>\n            <th>CLDR Output</th>\n          </tr>\n          {Object.keys(localizedTokenMap).map((tokenKey: string)=> {\n\n            const momentValue = myMoment.format(getMomentFormattingToken(tokenKey));\n            // @ts-ignore\n            let cldrValue = i18nInstance.formatDate(cldrDate, localizedTokenMap[tokenKey]);\n            // if(tokenKey === 'lllLT'){\n            //   // @ts-ignore\n            //   cldrValue = i18nInstance.formatDate(cldrDate, { \n            //     context: 'standalone', \n            //     date: 'medium',\n            //     time: 'short'\n            //   });\n            // }\n            const doValuesMatch = momentValue === cldrValue;\n            return (\n              <tr key={tokenKey} className={classnames({mismatch: !doValuesMatch})}>\n                <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n                <td>{tokenKey}</td>\n                <td>{localizedTokenMap[tokenKey]}</td>\n                <td>{momentValue}</td>\n                <td>{cldrValue}</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst renderCustomTable = (myMoment: moment.Moment, cldr: CLDR) => {\n  const cldrDate = { \n    date: myMoment.toDate(),\n    zoneId: \"America/New_York\"\n  };\n  return (\n    <div className=\"tableContainer\">\n      <table>\n        <tbody>\n        <tr>\n          <th>Match</th>\n          <th>Moment Token</th>\n          <th>CLDR.Calendar Token</th>\n          <th>Moment Output</th>\n          <th>CLDR Output</th>\n        </tr>\n        {Object.keys(customTokenMap).map((tokenKey: string)=> {\n          const momentValue = myMoment.format(getMomentFormattingToken(tokenKey));\n          const cldrValue = cldr.Calendars.formatDateRaw(cldrDate, { \n              pattern: customTokenMap[tokenKey]\n            });\n          const doValuesMatch = momentValue == cldrValue;\n          return (\n            <tr key={tokenKey} className={classnames({mismatch: !doValuesMatch})}>\n              <td>{doValuesMatch ? <span>&#9989;</span> :  <span>&#10060;</span>}</td>\n              <td>{tokenKey}</td>\n              <td>{customTokenMap[tokenKey]}</td>\n              <td>{momentValue}</td>\n              <td>{cldrValue}</td>\n            </tr>\n          );\n        })}\n        </tbody>\n      </table>\n    </div>\n  );\n};\nconst renderDateDifference = (myMoment: moment.Moment, cldr: CLDR) => {\n  const output = [{\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'days'),\n    measure: 'days',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'weeks'),\n    measure: 'weeks',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(1, 'weeks'),\n    measure: 'years',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().add(1, 'years'),\n    measure: 'years',\n  },\n  {\n    aDate: myMoment,\n    bDate: myMoment.clone().subtract(5, 'years'),\n    measure: 'years',\n  },\n\n];\nreturn (\n  <div className=\"tableContainer\">\n      <table>\n        <tbody>\n        <tr>\n          <th>aDate</th>\n          <th>bDate</th>\n          <th>measure</th>\n          <th>cldrOutput</th>\n          <th>momentOutput</th>\n        </tr>\n        {output.map((outputItem, i) => {\n\n          return (\n            <tr key={i}>\n              <td>{outputItem.aDate.format()}</td>\n              <td>{outputItem.bDate.format()}</td>\n              <td>{outputItem.measure}</td>\n              <td>{''}</td>\n              \n              <td>{\n                //@ts-ignore\n                outputItem.aDate.diff(outputItem.bDate, outputItem.measure)\n              }</td>\n            </tr>\n          )\n        })}\n        </tbody>\n      </table>\n    </div>\n);\n}\n\nconst buildHumanizedTableData = (myMoment: moment.Moment) => {\n  const calendarData: IHumanizeDataItem[] = [];\n  const relativeData: IHumanizeDataItem[] = [];\n\n  const nowTimeStamp = myMoment.clone().valueOf();\n  TIME_UNITS.forEach(unit => {\n    TIME_INTERVALS.forEach(interval => {\n      let xTimeStamp = myMoment.clone().add(interval, unit).valueOf();\n      // Both grids need start and end date\n      const dataItem = {\n        startDate: moment(nowTimeStamp).format(),\n        endDate: moment(xTimeStamp).format()\n      };\n      // Create the moment and cldr calendar/contextual date output\n      calendarData.push({\n        ...dataItem,\n        momentOutput: moment(xTimeStamp).calendar(nowTimeStamp),\n        // @ts-ignore\n        cldrOutput: i18nInstance.formatContextualDate(xTimeStamp, nowTimeStamp)\n      });\n      // Create moment and cldr relative date output\n      relativeData.push({\n        ...dataItem,\n       momentOutput: moment(xTimeStamp).from(nowTimeStamp),\n       // @ts-ignore\n       cldrOutput: i18nInstance.cldrFormatRelativeTime(\n        xTimeStamp,\n        nowTimeStamp\n      )\n      })\n    });\n  });\n  return {\n    calendarData,\n    relativeData\n  };\n};\n\nconst DateFormattingContainer = () => {\n  return ( \n    <div>\n      <h2>Date Display/Formatting</h2>\n        <h3>Function signatures</h3>\n        <pre>\n          <code>\n            <span>// Momentjs</span>\n            <span>moment().format(getFormattingToken(token));</span><br/>\n            <span>// CLDR.Calendar localized format</span>\n            <span>{`cldr.Calendars.formatDate(date, { context: 'standalone', skeleton: token});`}</span>\n            <span>// CLDR.Calendar custom format</span>\n            <span>{`cldr.Calendars.formatDateRaw(date, { pattern: token});`}</span>\n          </code>\n        </pre>\n        { LOCALES.map(locale => {\n          i18nInstance.setFormattingLocale(locale);\n          const myMoment = moment(nowTimestamp).clone();\n          const {\n            calendarData,\n            relativeData\n          } = buildHumanizedTableData(myMoment);\n          return (\n            <div key={locale}>\n              <TableSectionHeader locale={locale} title=\"localized tokens\" />\n              {renderLocalizedTable(myMoment)}\n              <TableSectionHeader locale={locale} title=\"relative dates\" />\n              <HumanizedTable tableData={relativeData} />\n              <TableSectionHeader locale={locale} title=\"calendar dates\" />\n              <HumanizedTable tableData={calendarData} />\n            </div>\n          )}) \n        }\n    </div>\n  );\n\n};\n\nexport default DateFormattingContainer;","import * as React from 'react';\n\nimport './App.css';\nimport DateFormattingContainer from './components/DateFormattingContainer';\n\ntype State = {\n  formattingLocale: string,\n};\n\ntype Props = any;\n\nclass App extends React.Component<Props, State> {\n  public render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Moment vs CLDR.Calendar</h1>\n        </header>\n        <div>\n          <DateFormattingContainer />\n        </div>\n      </div>\n    )\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}